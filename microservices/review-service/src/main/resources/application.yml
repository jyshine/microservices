# 서버 설정
server.port: 7003
server.error.include-message: always

# Hibernate 설정 - 프로덕션 환경에서는 "none"으로 설정하는 것을 권장
spring.jpa.hibernate.ddl-auto: update

# 데이터소스 설정 (MySQL 데이터베이스)
spring.datasource:
  url: jdbc:mysql://localhost/review-db
  username: user
  password: pwd

# HikariCP 설정 - 초기화 실패 타임아웃
spring.datasource.hikari.initializationFailTimeout: 60000

# Spring Cloud Function 정의
spring.cloud.function.definition: messageProcessor

# Spring Cloud Stream 설정
spring.cloud.stream:
  defaultBinder: rabbit  # 기본 바인더를 RabbitMQ로 설정
  default.contentType: application/json  # 기본 메시지 컨텐츠 타입을 JSON으로 설정
  bindings.messageProcessor-in-0:  # 메시지 프로세서의 입력 바인딩 설정
    destination: reviews  # 메시지를 수신할 RabbitMQ 큐 또는 Kafka 토픽
    group: reviewsGroup  # 컨슈머 그룹 이름

# 메시지 소비자 설정
spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
  maxAttempts: 3  # 최대 재시도 횟수
  backOffInitialInterval: 500  # 초기 재시도 대기 시간 (ms)
  backOffMaxInterval: 1000  # 최대 재시도 대기 시간 (ms)
  backOffMultiplier: 2.0  # 재시도 대기 시간 배수

# RabbitMQ 소비자 설정
spring.cloud.stream.rabbit.bindings.messageProcessor-in-0.consumer:
  autoBindDlq: true  # DLQ (Dead Letter Queue) 자동 바인딩
  republishToDlq: true  # 실패한 메시지를 DLQ로 재발행

# Kafka 소비자 설정
spring.cloud.stream.kafka.bindings.messageProcessor-in-0.consumer:
  enableDlq: true  # Kafka DLQ 활성화

# Kafka 바인더 설정
spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1  # Kafka 브로커 주소
  defaultBrokerPort: 9092  # Kafka 브로커 포트

# RabbitMQ 설정
spring.rabbitmq:
  host: 127.0.0.1  # RabbitMQ 호스트 주소
  port: 5672  # RabbitMQ 포트
  username: guest  # RabbitMQ 사용자 이름
  password: guest  # RabbitMQ 비밀번호

# 로깅 설정
logging:
  level:
    root: INFO  # 루트 로깅 레벨
    se.magnus: DEBUG  # 특정 패키지 로깅 레벨
    org.hibernate.SQL: DEBUG  # Hibernate SQL 로깅 레벨
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE  # Hibernate SQL 바인딩 로깅 레벨

# 관리 엔드포인트 설정
management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

# Docker 프로파일 설정
---
spring.config.activate.on-profile: docker

server.port: 8080  # Docker 프로파일에서의 서버 포트

spring.datasource.url: jdbc:mysql://mysql/review-db  # Docker 프로파일에서의 데이터소스 URL

spring.rabbitmq.host: rabbitmq  # Docker 프로파일에서의 RabbitMQ 호스트

spring.cloud.stream.kafka.binder.brokers: kafka  # Docker 프로파일에서의 Kafka 브로커

# 스트리밍 파티셔닝 설정
---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
  partitioned: true  # 파티셔닝 활성화
  instanceCount: 2  # 인스턴스 개수

# 인스턴스 0 설정
---
spring.config.activate.on-profile: streaming_instance_0

spring.cloud.stream.bindings.messageProcessor-in-0.consumer.instanceIndex: 0  # 인스턴스 인덱스 0

# 인스턴스 1 설정
---
spring.config.activate.on-profile: streaming_instance_1

spring.cloud.stream.bindings.messageProcessor-in-0.consumer.instanceIndex: 1  # 인스턴스 인덱스 1

# Kafka 프로파일 설정
---
spring.config.activate.on-profile: kafka

management.health.rabbit.enabled: false  # Kafka 프로파일에서 RabbitMQ 헬스 체크 비활성화
spring.cloud.stream.defaultBinder: kafka  # Kafka를 기본 바인더로 설정
spring.kafka.bootstrap-servers: kafka:9092  # Kafka 부트스트랩 서버 주소
spring.cloud.stream.kafka.binder.replication-factor: 1  # Kafka 복제 인수 설정
